<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <url-pattern>*.jspf</url-pattern>
            <page-encoding>UTF-8</page-encoding>
            <!--<scripting-invalid>true</scripting-invalid>-->
            <include-prelude>/WEB-INF/jsp/includePrelude.jspf</include-prelude>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
            <default-content-type>text/html</default-content-type>
        </jsp-property-group>
    </jsp-config>

    <session-config>
        <session-timeout>30</session-timeout>
        <cookie-config>
            <http-only>true</http-only>
        </cookie-config>
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>

    <!--org.springframework.web.filter.CharacterEncodingFilter extends OncePerRequestFilter
    Servlet Filter that allows one to specify a character encoding for requests.
    This is useful because current browsers typically do not set a character encoding even if specified in the HTML page or form.
    This filter can either apply its encoding if the request does not already specify an encoding, or enforce this filter's encoding in any case ("forceEncoding"="true").
    In the latter case, the encoding will also be applied as default response encoding (although this will usually be overridden by a full content type set in the view).
    现在浏览器request都不带头的，若是在HttpServlet的doPost中，HttpServletRequest.getCharacterEncoding()返回null！...-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>

        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Apache Shiro -->
    <!--【DelegatingFilterProxy】
    Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.
    Supports a "targetBeanName" filter init-param in web.xml, specifying the name of the target bean in the Spring application context.

    web.xml will usually contain a DelegatingFilterProxy definition,
    with the specified filter-name corresponding to a bean name in Spring's root application context.
    All calls to the filter proxy will then be delegated to that bean in the Spring context,
    which is required to implement the standard Servlet Filter interface.

    This approach is particularly useful for Filter implementation with complex setup needs,
    allowing to apply the full Spring bean definition machinery to Filter instances.
    Alternatively, consider standard Filter setup in combination with looking up service beans from the Spring root application context.

    NOTE: The lifecycle methods defined by the Servlet Filter interface will by default not be delegated to the target bean,
    relying on the Spring application context to manage the lifecycle of that bean.
    Specifying the "targetFilterLifecycle" filter init-param as "true" will
    enforce invocation of the Filter.init and Filter.destroy lifecycle methods on the target bean,
    letting the servlet container manage the filter lifecycle.

    As of Spring 3.1,
    DelegatingFilterProxy has been updated to optionally accept constructor parameters when using Servlet 3.0's instance-based filter registration methods,
    usually in conjunction with Spring 3.1's WebApplicationInitializer SPI.
    These constructors allow for providing the delegate Filter bean directly, or providing the application context and bean name to fetch,
    avoiding the need to look up the application context from the ServletContext.

    This class was originally inspired by Spring Security's FilterToBeanProxy class, written by Ben Alex.-->
    <filter>
        <filter-name>DelegatingToShiroFilterSpringBean</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
            <!--↑ 【targetFilterLifecycle】【扣】(不太明白...) whether to invoke the Filter.init and Filter.destroy lifecycle methods on the target bean.
                Default is "false"; target beans usually rely on the Spring application context for managing their lifecycle.
                Setting this flag to "true" means that
                the servlet container will control the lifecycle of the target Filter, with this proxy delegating the corresponding calls.-->
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DelegatingToShiroFilterSpringBean</filter-name>
        <url-pattern>/*</url-pattern><!--【扣】难道不是应该只过滤本app的所有path么？-->
    </filter-mapping>



</web-app>