<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
       default-lazy-init="true">

    <description>Shiro 配置</description>

    <context:property-placeholder location="classpath:application.properties"/>

    <bean id="DelegatingToShiroFilterSpringBean" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/loginForm"/><!--【扣】然而jeesite似乎是用get、post方法的不同来对loginUrl、successUrl进行区分？-->
        <property name="successUrl" value="/index"/>
<!--用默认的...丐...
        <property name="filters">
            <map>
            </map>
        </property>
-->
        <property name="filterChainDefinitions">
            <value><!--【鸣】短路，一旦匹配，排后面的就不管：'short-circuit'    the first match wins-->
                /static/** = anon
                /loginForm = authc
                /logout = logout
                /** = user
            </value>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="libraryAuthorizingRealm"/><!--【】通过继承shiro的AuthorizingRealm得到的LibraryAuthorizingRealm(其中改写俩doGet... method), 注为了@Service, 即bean了-->
        <!--<property name="sessionManager" value=""/>  先用默认的，就是DefaultWebSessionManager-->
        <!--<property name="cacheManager" value=""/>    缓存还没学，先不用-->
    </bean>

    <!--【扣】开启Shiro annotation，shiro文档(Enabling Shiro Annotations)也是如是，没具体展开说原理-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- AOP式方法级权限检查  --><!--只要扫到advisor则 自动创建 合适的proxy【鸣】即 开启Shiro annotation-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" /><!--jeesite是这么设置，不太清楚为啥-->
        <!--ProxyConfig.proxyTargetClass
        public void setProxyTargetClass(boolean proxyTargetClass)
        Set whether to proxy the target class directly, instead of just proxying specific interfaces. Default is "false".
        Set this to "true" to force proxying for the TargetSource's exposed target class.
        If that target class is an interface, a JDK proxy will be created for the given interface.
        If that target class is any other class, a CGLIB proxy will be created for the given class.
        Note: Depending on the configuration of the concrete proxy factory,
              the proxy-target-class behavior will also be applied if no interfaces have been specified (and no interface autodetection is activated).-->
    </bean>
    <!--extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor【扣】没看懂，大概是这里负责将shiro annotation转译为advisor-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


</beans>